{% comment %} CSS code for widget {% endcomment %}
{{ 'widget.css' | asset_url | stylesheet_tag }}


{% comment %} JS import {% endcomment %}
<script src="{{ 'widget-fetching.js' | asset_url }}" async></script>
<script src="{{ 'widget-utils.js' | asset_url }}" async></script>

<style>

  body.modal-open {
    overflow: hidden;
  }
  [x-cloak] {
    display: none !important;
  }


  /* User inputed settings */

  .bundle_border_radius_big {
    border-radius: {{ settings.bundle_border_radius_big }}px;
  }

  .bundle_border_radius_small {
    border-radius: {{ settings.bundle_border_radius_small }}px;

  }

  .step_icon_color {
    color: {{ settings.step_icon_color }};
    border-color: {{ settings.step_icon_color }}
  }

  .passed_step_icon_color {
    background-color: {{ settings.step_icon_color }};
    border-color: {{ settings.step_icon_color }}
  }

  .step_title_color {
    color: {{ settings.step_title_color }}
  }

  .step_description_color {
    color: {{ settings.step_description_color }}
  }

  .step_description_bg_color {
    background-color: {{ settings.step_description_bg_color }}
  }

  .add_to_bundle_text_bg_color {
    background-color: {{ settings.add_to_bundle_bg_color }};
    border-color: {{ settings.add_to_bundle_bg_color }};
    color: {{ settings.add_to_bundle_text_color }}

  }

  .view_product_text_border_color {
    color: {{ settings.view_product_text_border_color }};
    border-color: {{ settings.view_product_text_border_color }}
  }

  .remove_product_text_border_color {
    color: {{ settings.remove_product_text_border_color }};
    border-color: {{ settings.remove_product_text_border_color }}

  }

  .prev_step_text_border_color {
    color: {{ settings.prev_step_text_color }};
    border-color: {{ settings.prev_step_bg_color }};

  }
  .next_step_text_bg_color {
    color: {{ settings.next_step_text_color }};
    background-color: {{ settings.next_step_bg_color }};

  }

</style>

{% comment %} Widget body start {% endcomment %}
{% if bundleId != blank %}
  <div id="neat-bundles-widget-container" x-data="bundle">

    {% comment %} Loading sceleton {% endcomment %}
    <template x-if="showSkeleton">
      <div class="width-full">

        {{ widgetSkeleton }}
      </div>
    </template>

    {% comment %} Not loading {% endcomment %}
    <template x-if="!initialLoading">
      <div
        class="neat-bundles-inner-container"
        x-init="$nextTick(() => { fetchDataForStep()})"
        x-show="!showSkeleton">

        {% comment %} Step heading {% endcomment %}
        <div class="steps-heading-container">
          <template x-for="step in bundleData.steps">

            {% comment %} Passed steps icon {% endcomment %}
            <div>
              <div
                class="step-heading-container"
                @click="setActiveStep(step.stepNumber)"
                x-show="step.stepNumber < reachedStep">
                <div class="step-icon-container step-icon-container-border passed_step_icon_color">
                  <span x-text="step.stepNumber" class="icon-number passed-step"></span>
                </div>
                <span
                  x-text="step.title"
                  class="step-title step_title_color"
                  x-bind:class="activeStep < reachedStep ? 'active-step' : ''"></span>
              </div>

              {% comment %} Current step icon {% endcomment %}
              <div
                class="step-heading-container"
                @click="setActiveStep(step.stepNumber)"
                x-show="step.stepNumber == reachedStep">
                <div class="step-icon-container step-icon-container-border step_icon_color">
                  <span x-text="step.stepNumber" class="icon-number step_icon_color"></span>
                </div>
                <span
                  x-text="step.title"
                  class="step-title step_title_color"
                  x-bind:class="activeStep == reachedStep ? 'active-step' : ''"></span>
              </div>

              {% comment %} Inactive step icon {% endcomment %}
              <div
                class="step-heading-container inactive-step"
                @click="setActiveStep(step.stepNumber)"
                x-show="step.stepNumber > reachedStep">
                <div class="step-icon-container step-icon-container-border step_icon_color">
                  <span x-text="step.stepNumber" class="icon-number step_icon_color"></span>
                </div>
                <span x-text="step.title" class="step-title step_title_color"></span>
              </div>
            </div>
          </template>
        </div>


        {% comment %} Step body {% endcomment %}
        <div
          class="width-full"
          x-show="stepLoading && !showSkeleton"
          x-cloak>
          {{ stepSkeleton }}
        </div>

        {% comment %} Products loaded {% endcomment %}
        <template x-if="!stepLoading">
          <div class="step-body">

            {% comment %} Step description {% endcomment %}
            <div class="step-description-container bundle_border_radius_big step_description_bg_color">
              <p x-text="activeStepData.description" class="step_description_color"></p>
            </div>

            {% comment %} Product step {% endcomment %}
            <div class="products-container product_align" x-show="activeStepData.stepType == 'PRODUCT'">

              {% comment %} Individualproducts {% endcomment %}
              <template x-for="product in activeStepProducts">
                <div class="product bundle_border_radius_big">

                  <div class="product-img">
                    <img
                      x-bind:src="product.variants[product.selectedVariantIndex].featured_image?.src || product.featured_image"
                      alt="product image"
                      width="200"
                      height="200">
                    <div class="product-added-overlay" x-show="getProductQuantity(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep) > 0">
                      <svg
                        width="55"
                        height="55"
                        viewBox="0 0 13 9"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path d="M4.69632 8.92638L0.5 4.73006L1.54908 3.68098L4.69632 6.82822L11.4509 0.0736198L12.5 1.1227L4.69632 8.92638Z" fill="#282828" />
                      </svg>
                    </div>
                  </div>
                  <div class="product-details">
                    <div class="product-title-and-price">
                      <p x-text="product.title" class="product-title"></p>
                      <span
                        x-text="product.variants[product.selectedVariantIndex].price"
                        x-show="activeStepData.productInput.showProductPrice"
                        class="product-price"></span>
                    </div>

                    {% comment %} Product action buttons {% endcomment %}

                    {% comment %} This product is not added to bundle storage {% endcomment %}
                    <div class="width-full">
                      <div
                        x-data="{showModal: false}"
                        class="product-action-btns-container"
                        x-show="!isProductInBundle(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)">
                        <button class="small-btn view-product-btn view_product_text_border_color bundle_border_radius_small" @click="() => {document.body.classList.add('modal-open'); showModal = true}">View product</button>

                        {% comment %} Adding product that has no variants besides the default{% endcomment %}
                        <button
                          x-show="product.options.length == 0"
                          class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small"
                          :disabled="!product.variants[product.selectedVariantIndex].available || !canAddMoreProducts()"
                          @click="addProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">Add product</button>

                        {% comment %} Adding product that has other variants besides the default {% endcomment %}
                        <button
                          x-show="product.options.length > 0"
                          class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small"
                          :disabled="!product.variants[product.selectedVariantIndex].available || !canAddMoreProducts()"
                          @click="() => {document.body.classList.add('modal-open'); showModal = true}">Select option</button>


                        {% comment %} View product modal {% endcomment %}
                        <div
                          class="view-product-modal"
                          x-show="showModal"
                          x-transition>
                          <div class="view-product-modal-inner bundle_border_radius_big" @click.away="() => {document.body.classList.remove('modal-open'); showModal = false}">
                            <div class="mobile-close-btn close-modal-container">
                              <span class="close" @click="() => {document.body.classList.remove('modal-open'); showModal = false}">&times;</span>
                            </div>

                            <div class="modal-product-img">
                              <img
                                class="bundle_border_radius_big"
                                x-bind:src="product.variants[product.selectedVariantIndex].featured_image?.src || product.featured_image"
                                alt="product image"
                                width="400"
                                height="400">
                            </div>
                            <div class="modal-product-details">
                              <div class="desktop-close-btn close-modal-container ">
                                <span class="close" @click="() => {document.body.classList.remove('modal-open'); showModal = false}">&times;</span>
                              </div>

                              <h2 x-text="product.title"></h2>

                              {% comment %} Product variant selector {% endcomment %}
                              <div
                                x-data="{selectedOptions: product.variants[product.selectedVariantIndex].options.map(option => option)}"
                                x-init="$watch('selectedOptions', value => {
                              product.selectedVariantIndex = findVariantIndex(value, product.variants)
                            })"
                                class="product-options-container">

                                {% comment %} Option values {% endcomment %}
                                <template x-for="option in product.options">
                                  <div class="product-option-picker-container">
                                    <label x-text="option.name" class="option-title"></label>
                                    <select class="variant-selector bundle_border_radius_small" x-model="selectedOptions[product.options.indexOf(option)]">
                                      <template x-for="value in option.values">
                                        <option x-text="value" class="option-value"></option>
                                      </template>
                                    </select>
                                  </div>
                                </template>
                                <p class="product-variant-unavailable-text" x-text="!product.variants[product.selectedVariantIndex].available ? 'This product option is currenty unavailable.' : ''"></p>
                              </div>

                              <button
                                class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small"
                                :disabled="!product.variants[product.selectedVariantIndex].available || !canAddMoreProducts()"
                                @click="() => { addProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs);
                            document.body.classList.remove('modal-open');
                            showModal = false;}
                          ">
                                Add product</button>

                              <div class="product-description">
                                <p x-html="product.description"></p>
                              </div>


                            </div>
                          </div>
                        </div>
                      </div>
                      <p class="product-variant-unavailable-text" x-text="!product.variants[product.selectedVariantIndex].available ? 'This product is currenty unavailable.' : ''"></p>
                    </div>


                    {% comment %} This product is added to bundle storage {% endcomment %}
                    <div class="width-full" x-show="isProductInBundle(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)">

                      {% comment %} This step doesn't allow duplicates {% endcomment %}
                      <div class="product-action-btns-container" x-show="!activeStepData.productInput.allowProductDuplicates">
                        <button class="small-btn remove-from-bundle-btn remove_product_text_border_color bundle_border_radius_small" @click="removeProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">Remove
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 16 16"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg">
                            <path
                              d="M12.6667 3.83333L3.33334 13.1667"
                              stroke="{{ settings.remove_product_text_border_color }}"
                              stroke-width="1.33333"
                              stroke-linecap="round" />
                            <path
                              d="M3.33334 3.83333L12.6667 13.1667"
                              stroke="{{ settings.remove_product_text_border_color }}"
                              stroke-width="1.33333"
                              stroke-linecap="round" />
                          </svg>
                        </button>
                        <button class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small" disabled>Added
                          <svg
                            width="13"
                            height="9"
                            viewBox="0 0 13 9"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M4.69632 8.92638L0.5 4.73006L1.54908 3.68098L4.69632 6.82822L11.4509 0.0736198L12.5 1.1227L4.69632 8.92638Z" fill="{{ settings.add_to_bundle_text_color }}" />
                          </svg>
                        </button>
                      </div>

                      {% comment %} The step allows duplicates {% endcomment %}
                      <div class="increment-decrement-container" x-show="activeStepData.productInput.allowProductDuplicates">
                        <button class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small" @click="removeProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">-</button>
                        <p x-text="getProductQuantity(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)"></p>
                        <button
                          class="small-btn add_to_bundle_text_bg_color bundle_border_radius_small"
                          @click="addProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)"
                          x-bind:disabled="!canAddMoreProducts()">+</button>
                      </div>
                    </div>
                  </div>
                </div>
              </template>
            </div>

            {% comment %} Content step {% endcomment %}
            <div
              x-show="activeStepData.stepType == 'CONTENT'"
              x-cloak
              class="content-step-container">
              <template x-for="contentInput in activeStepData.contentInputs">
                <div class="content-input-containers">

                  {% comment %} Content input of tpye 'TEXT' {% endcomment %}
                  <div x-show="contentInput.inputType == 'TEXT'" class="content-input">
                    <label
                      x-text="contentInput.inputLabel"
                      :for="`text-input-${contentInput.id}`"
                      class="bundle_border_radius_small"></label>
                    <input
                      class="bundle_border_radius_small"
                      x-bind:id="`text-input-${contentInput.id}`"
                      type="text"
                      :minlength="contentInput.required ? 1 : 0"
                      :maxlength="contentInput.maxChars"
                      x-model="contentInput.value"
                      x-on:change="contentInputHandler($event, stepInputs, activeStep, contentInput.id)">
                  </div>
                  {% comment %} Content input of tpye 'NUMBER' {% endcomment %}
                  <div x-show="contentInput.inputType == 'NUMBER'" class="content-input">
                    <label
                      x-text="contentInput.inputLabel"
                      :for="`number-input-${contentInput.id}`"
                      class="bundle_border_radius_small"></label>
                    <input
                      class="bundle_border_radius_small"
                      x-bind:id="`number-input-${contentInput.id}`"
                      type="number"
                      :minlength="contentInput.required ? 1 : 0"
                      :maxlength="contentInput.maxChars"
                      x-model="contentInput.value"
                      x-on:change="contentInputHandler($event, stepInputs, activeStep, contentInput.id)">
                  </div>
                  {% comment %} Content input of tpye 'IMAGE' {% endcomment %}
                  <template x-if="contentInput.inputType == 'IMAGE'">
                    <div class="content-input image-input">
                      <p x-text="contentInput.inputLabel"></p>
                      <label :for="`image-input-${contentInput.id}`" class="bundle_border_radius_small">
                        <svg
                          x-show="contentInput.value == '' || !contentInput.value"
                          width="50"
                          height="50"
                          viewBox="0 0 39 39"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg">
                          <path
                            d="M6.32205 35.9346H31.8767C33.8929 35.9346 35.5273 34.3002 35.5273 32.284V6.72934C35.5273 4.71313 33.8929 3.07867 31.8767 3.07867H6.32205C4.30584 3.07867 2.67139 4.71313 2.67139 6.72934V32.284C2.67139 34.3002 4.30584 35.9346 6.32205 35.9346ZM6.32205 35.9346L26.4007 15.856L35.5273 24.9826M15.4487 13.118C15.4487 14.6301 14.2229 15.856 12.7107 15.856C11.1986 15.856 9.97271 14.6301 9.97271 13.118C9.97271 11.6058 11.1986 10.38 12.7107 10.38C14.2229 10.38 15.4487 11.6058 15.4487 13.118Z"
                            stroke="#1E1E1E"
                            stroke-width="4.00662"
                            stroke-linecap="round"
                            stroke-linejoin="round" />
                        </svg>

                        <p x-show="contentInput.value == '' || !contentInput.value">Click here to select your image</p>

                        <div
                          :id="`preview-image-input-${contentInput.id}`"
                          class="image-preview-container"
                          x-show="contentInput.value && contentInput.value != ''"></div>

                      </label>
                      <input
                        class="image-input-field"
                        x-bind:id="`image-input-${contentInput.id}`"
                        type="file"
                        max="1"
                        x-on:change="() => {
                            if ($event.target.files.length == 0) return;
                            contentInput.value = $el.value; newImageSelected($event, contentInput.id, stepInputs, activeStep)
                            }"
                        accept="image/*"
                        placeholder="Enter text">
                    </div>
                  </template>

                </div>
              </template>
            </div>

          </div>
        </template>

        {% comment %}  Step navigation {% endcomment %}
        <div class="nav-wrapper">
          <div class="nav-buttons" x-show="!stepLoading">
            <button
              class="nav-button prev-step-btn prev_step_text_bg_color bundle_border_radius_small"
              @click="decrementStep"
              x-bind:disabled="activeStep == 1">
              <svg
                width="12"
                height="8"
                viewBox="0 0 12 8"
                fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M1.33333 4.00004H10.6667M1.33333 4.00004L3.99999 1.33337M1.33333 4.00004L3.99999 6.66671"
                  stroke="{{ settings.prev_step_text_color }}"
                  stroke-width="1.33333"
                  stroke-linecap="round"
                  stroke-linejoin="round" />
              </svg>
              Previous step</button>
            <button
              class="nav-button next_step_text_bg_color bundle_border_radius_small"
              @click="incrementStep"
              x-bind:disabled="!stepInputsFulfiled()"
              x-show="activeStep < bundleData.steps.length"
              x-ref="nextStepBtn">Next step

              <svg
                width="11"
                height="8"
                viewBox="0 0 11 8"
                fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M10.1667 4.00004H0.833374M10.1667 4.00004L7.50004 6.66671M10.1667 4.00004L7.50004 1.33337"
                  stroke="{{ settings.next_step_text_color }}"
                  stroke-width="1.33333"
                  stroke-linecap="round"
                  stroke-linejoin="round" />
              </svg>

            </button>

            <button
              class="nav-button add_to_bundle_text_bg_color bundle_border_radius_small"
              @click="addBundleToCart()"
              x-bind:disabled="!stepInputsFulfiled()"
              x-show="activeStep == bundleData.steps.length"
              x-ref="finishBtn">Finish</button>


          </div>
          {% comment %} Tooltip to indicate how many products a customer needs to select on all steps except final step{% endcomment %}
          <template x-if="activeStepData.stepType == 'PRODUCT' && !stepLoading">
            <div
              class="tooltip bundle_border_radius_small tooltip-border"
              x-show="!stepInputsFulfiled()"
              x-text="`Please select between ${activeStepData.productInput?.minProductsOnStep} and ${activeStepData.productInput?.maxProductsOnStep} products`"></div>
          </template>

        </div>


        <template x-if="finalLoading">
          <div class="final-loading-container">
            <div class="final-loading-inner">
                {% comment %} Loader {% endcomment %}
              <img
                src="{{ 'finalAnimation.svg' | asset_url }}"
                alt="loader"
                width="201"
                height="201">

            </div>
          </div>
        </template>

      </div>
    </template>
  </div>
{% endif %}
{% comment %} Widget body end {% endcomment %}

{% comment %} JS code for widget {% endcomment %}
<script>
    const APP_URL = `https://{{ shop.domain }}/apps/nb/api`;
  
    //Money format from shopify used to format prices
    Shopify.money_format = "{{ shop.money_format }}";
  
    document.addEventListener("alpine:init", () => {
      Alpine.data("bundle", () => ({
        async init(){
          const response = await fetch(`${APP_URL}/bundleData?bundleId={{ bundleId }}`, {mode: 'cors'})
  
          const data = await response.json();
  
          if (data.ok) {
            this.bundleData = data.data;
            this.activeStepData = data.data.steps[0];

            this.initialLoading = false;
  
          }
          else {
            console.log(data.message);
            alert("There was an error with fetching your bundle. Please try again. If the problem persists, contact support.");
          }
        },
  
        shopDomain: "{{ shop.permanent_domain }}", // Shopify store domain
        bundleId: "{{ bundleId }}", // Bundle ID
  
        showSkeleton: true, // Show sceleton loader
        initialLoading: true, // Initial loading state
        stepLoading: true, // Step loading state
        finalLoading: false, // Final loading state
        bundleData: {}, // Bundle settings data
  
        //Current bundle selects and inputs 
        stepInputs: [], //Inputs on steps in format [{stepNumber: 1, stepType: "PRODUCT", inputs: [{id: id, quantity: quantity}]}, {stepNumber: 2, stepType: "CONTENT" inputs: [{type: text, value: value}]}]
        reachedStep: 1, // Farthes step reached by the user
        activeStep: 1, // Current active step
        activeStepData: {}, // Current active step data
        activeStepProducts: [], // Products data
  
        //Fetch data for the current step (either products or content)
        async fetchDataForStep(){
          this.stepLoading = true;
  
          //Get data for current step
          this.activeStepData = await fetchActiveStepData(this.bundleId, this.activeStep, this.activeStepData);
  
          if (!this.activeStepData) return;
  
          if (this.bundleData.steps[this.activeStep - 1].stepType == "PRODUCT") {
            this.fetchProductForStep();
          } else if (this.bundleData.steps[this.activeStep - 1].stepType == "CONTENT") {
            //Fetch content data
  
          }
          this.showSkeleton = false;
          this.stepLoading = false;
        },
  
        // Fetch products data
        async fetchProductForStep(){        
          await fetchProducts(this.activeStepData, this.activeStepProducts, window.Shopify, Shopify)
        },
  
        //Add product to the bundle
        addProduct(productId, activeStep, stepInputs){
          addProductToBundle(productId, activeStep, stepInputs, this.activeStepData.productInput.maxProductsOnStep);
        },
  
        //Remove product from the bundle
        removeProduct(productId, activeStep, stepInputs){
          removeProductFromBundle(productId, activeStep, stepInputs);
        },
  
        //Get product quanity
        getProductQuantity(productId, stepInputs, activeStep){
          return getProductQuantityInBundle(productId, stepInputs, activeStep);
        },
  
        //Check if the user can add more products on this step
        canAddMoreProducts() {
          return getProductsOnStep(this.activeStep, this.stepInputs) < this.activeStepData.productInput.maxProductsOnStep;
        },
  
        //Check if the user can proceed to the next step
        stepInputsFulfiled(){
          if (!this.activeStepData) return false;
  
          //Check if the user has selected the required amount of products
          if (this.activeStepData.stepType == 'PRODUCT') {
            const productsQuantity = getProductsOnStep(this.activeStep, this.stepInputs);
            return productsQuantity >= this.activeStepData.productInput?.minProductsOnStep && productsQuantity <= this.activeStepData?.productInput.maxProductsOnStep;
          }
          //Check if all content inputs are filled or not (depending if the fields are required)
          else if (this.activeStepData.stepType == 'CONTENT') {
            if (!this.activeStepData.contentInputs || this.activeStepData.contentInputs.length == 0) return false;
  
            for (let i = 0; i < this.activeStepData.contentInputs.length; i++) {
              if (this.activeStepData.contentInputs[i].required && (this.activeStepData.contentInputs[i].value == '' || !this.activeStepData.contentInputs[i].value)) return false;
            }
            return true;
          }
        },
        
        //Add bundle to cart
        async addBundleToCart(){
          this.finalLoading = true;
  
          await finishAndAddBundleToCart(this.stepInputs, this.bundleId, this.shopDomain, window.Shopify);
  
          this.finalLoading = false;
        },
  
        //Handle content input change
        newImageSelected(event, contentInputId, stepInputs, activeStep){
          createImagePreview(event); 
          this.contentInputHandler(event, stepInputs, activeStep, contentInputId);
        },
  
        //Handle content input change
        contentInputHandler(event, stepInputs, activeStep, contentInputId){
          handleContentInput(event, stepInputs, activeStep, contentInputId);
        },
  
        // Set active step
        setActiveStep(stepNumber){
         if (stepNumber <= this.reachedStep){
            this.activeStep = stepNumber;
            this.fetchDataForStep();
         }
        },
  
        // Increment step
        incrementStep(){
          if (this.activeStep < this.reachedStep){
            this.activeStep++;
            this.fetchDataForStep();
          }
          else if (this.activeStep == this.reachedStep){
            if (this.reachedStep == this.bundleData.steps.length) return;
            this.reachedStep++;
            this.activeStep++;
            this.fetchDataForStep();
          }
        },
  
        // Decrement step
        decrementStep(){
          if (this.activeStep > 1){
            this.activeStep--;      
            this.fetchDataForStep(); 
          }
        }
  
      }));
    });
</script>


{% comment %} Alpine.js import {% endcomment %}
<script src="{{ 'Alpine-3.14.1.js' | asset_url }}" defer></script>