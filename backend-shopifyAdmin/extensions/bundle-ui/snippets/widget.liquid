{% comment %} CSS code for widget {% endcomment %}
{{ 'widget.css' | asset_url | stylesheet_tag }}

{% comment %} Widget body start {% endcomment %}
{% if bundleId != blank %}
  <div id="neat-bundles-widget-container" x-data="bundle">
    {% comment %} Loading {% endcomment %}
    <template x-if="initialLoading">
      <div class="loading-container">
        <p>Loading...</p>
      </div>
    </template>

    {% comment %} Not loading {% endcomment %}
    <template x-if="!initialLoading">
      <div class="neat-bundles-inner-container">

        {% comment %} Step heading {% endcomment %}
        <div class="steps-heading-container">
          <template x-for="step in bundleData.steps">
            {% comment %} Previous steps icon {% endcomment %}
            <div>
              <template x-if="step.stepNumber < reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color passed-step">
                    <span x-text="step.stepNumber" class="icon-number passed-step"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
              {% comment %} Current step icon {% endcomment %}
              <template x-if="step.stepNumber == reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title active-step"></span>
                </div>
              </template>
              {% comment %} Inactive step icon {% endcomment %}
              <template x-if="step.stepNumber > reachedStep">
                <div class="step-heading-container inactive-step" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color ">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
            </div>
          </template>
        </div>

        {% comment %} Step description {% endcomment %}
        <div class="step-description-container">
          <p x-text="activeStepData.description"></p>
        </div>

        {% comment %} Step body {% endcomment %}
        <template x-if="stepLoading">
          <div class="loading-container">
            <p>Loading...</p>
          </div>
        </template>
        {% comment %} Products loaded {% endcomment %}
        <template x-if="!stepLoading">
          <div class="step-body">
            {% comment %} Product step {% endcomment %}
            <template x-if="activeStepData.stepType == 'PRODUCT'">
              <div class="products-container">
                {% comment %} Individualproducts {% endcomment %}
                <template x-for="product in activeStepProducts">
                  <div class="product">
                    <img x-bind:src="product.variants[product.selectedVariantIndex].featured_image?.src || product.featured_image" alt="product image">
                    <div class="product-details">
                      <p x-text="product.title" class="product-title"></p>
                      <template x-if="activeStepData.productInput.showProductPrice">
                        <span x-text="product.variants[product.selectedVariantIndex].price" class="product-price"></span>
                      </template>
                      {% comment %} Product variant selector {% endcomment %}
                      <div
                        x-data="{selectedOptions: product.variants[product.selectedVariantIndex].options.map(option => option)}"
                        x-init="$watch('selectedOptions', value => {
                        product.selectedVariantIndex = findVariantIndex(value, product.variants)
                      })"
                        class="product-variants-container">
                        {% comment %} Option values {% endcomment %}
                        <template x-for="option in product.options">
                          <div class="product-option-picker-container">
                            <label x-text="option.name" class="option-title"></label>
                            <select class="variant-selector" x-model="selectedOptions[product.options.indexOf(option)]">
                              <template x-for="value in option.values">
                                <option x-text="value" class="option-value"></option>
                              </template>
                            </select>
                          </div>
                        </template>
                        <p class="product-variant-unavailable-text" x-text="!product.variants[product.selectedVariantIndex].available ? 'This product option is currenty unavailable.' : ''"></p>
                      </div>
                      {% comment %} Product action buttons {% endcomment %}
                        {% comment %} This product is not added to bundle storage {% endcomment %}
                        <template x-if="!isProductInBundle(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)">
                          <div class="product-action-btns-container">
                            <button class="small-btn view-product-btn">View product</button>
                            <button
                              class="small-btn add-to-bundle-btn"
                              :disabled="!product.variants[product.selectedVariantIndex].available || !canAddMoreProducts()"
                              @click="addProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">Add product</button>
                          </div>
                        </template>
                        {% comment %} This product is added to bundle storage {% endcomment %}
                        <template x-if="isProductInBundle(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)">
                          {% comment %} This step doesn't allow duplicates {% endcomment %}
                           <div class="width-full">
                            <template x-if="!activeStepData.productInput.allowProductDuplicates">
                              <div class="product-action-btns-container">
                                <button class="small-btn remove-from-bundle-btn" @click="removeProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">Remove 
                                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12.6667 3.83333L3.33334 13.1667" stroke="#F24E1E" stroke-width="1.33333" stroke-linecap="round"/>
                                    <path d="M3.33334 3.83333L12.6667 13.1667" stroke="#F24E1E" stroke-width="1.33333" stroke-linecap="round"/>
                                  </svg>
                                </button>
                                <button class="small-btn add-to-bundle-btn" disabled>Added
                                  <svg
                                    width="13"
                                    height="9"
                                    viewBox="0 0 13 9"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path d="M4.69632 8.92638L0.5 4.73006L1.54908 3.68098L4.69632 6.82822L11.4509 0.0736198L12.5 1.1227L4.69632 8.92638Z" fill="#282828" />
                                  </svg>
                                </button>
                              </div>  
                            </template>
                            {% comment %} The step allows duplicates {% endcomment %}
                            <template x-if="activeStepData.productInput.allowProductDuplicates">
                              <div class="increment-decrement-container">
                                <button class="small-btn add-to-bundle-btn" @click="removeProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)">-</button>
                                <p x-text="getProductQuantity(product.variants[product.selectedVariantIndex].id, stepInputs, activeStep)"></p>
                                <button class="small-btn add-to-bundle-btn" @click="addProduct(product.variants[product.selectedVariantIndex].id, activeStep, stepInputs)" disabled="!canAddMoreProducts()">+</button>
                              </div>  
                            </template>
                          </div>
                        </template>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </template>
            {% comment %} Content step {% endcomment %}
            <template x-if="activeStepData.stepType == 'CONTENT'">
              <div>
                <p>Content step</p>
              </div>
            </template>
          </div>
        </template>

        {% comment %} Step navigation {% endcomment %}
        <div class="nav-buttons">
          <button @click="decrementStep">Previous step</button>
          <template x-if="!stepInputsFulfiled()">
            <p>Please select the required amount of products.</p>
          </template>
          <button @click="incrementStep" disabled="!stepInputsFulfiled()">Next step</button>
        </div>

      </div>
    </template>
  </div>
{% endif %}
{% comment %} Widget body end {% endcomment %}


{% comment %} JS import {% endcomment %}
<script src="{{ 'widget-utils.js' | asset_url }}"></script>
<script src="{{ 'widget-fetching.js' | asset_url }}"></script>

{% comment %} JS code for widget {% endcomment %}
<script>
  const APP_URL = "https://guard-shares-team-newspapers.trycloudflare.com";

  //Money format from shopify used to format prices
  Shopify.money_format = "{{ shop.money_format }}";

  document.addEventListener("alpine:init", () => {
    Alpine.data("bundle", () => ({
      // Fetch bundle settings data
      init(){
        fetch(`${APP_URL}/api/bundleData?bundleId={{ bundleId }}&storeUrl={{ shop.permanent_domain }}`, {mode: 'cors'})
          .then(response => response.json())
          .then(data => {
            if (data.ok) {
              this.bundleData = data.data;
              this.activeStepData = data.data.steps[0];
            }
            else {
              console.log(data.message);
            }
          }).then(() => {
            //Finished loading of the step icons and titles
            this.initialLoading = false;
          }).then(() => {
            //Fetching products for the first step
            this.fetchProductsData();
          }).catch(error => {
            console.log('error', error);
            alert("There was an error with fetching your bundle. Please try again. If the problem persists, contact support.");
          })
      },

      shopDomain: "{{ shop.permanent_domain }}", // Shopify store domain
      bundleId: "{{ bundleId }}", // Bundle ID

      initialLoading: true, // Loading state
      stepLoading: true, // Step loading state
      bundleData: {}, // Bundle settings data

      //Current bundle selects and inputs 
      stepInputs: [], //Inputs on steps in format [{stepNumber: 1, products: [{id: id, quantity: quantity}]}, {stepNumber: 2, content: [{type: text, value: value}]}]
      reachedStep: 1, // Farthes step reached by the user
      activeStep: 1, // Current active step
      activeStepData: {}, // Current active step data
      activeStepProducts: [], // Products data

      // Fetch products data
      async fetchProductsData(){
        this.stepLoading = true;
        await fetchProducts(this.activeStepData, this.activeStepProducts, window.Shopify, Shopify).then(() =>
          this.stepLoading = false
        );
      },

      //Add product to the bundle
      addProduct(productId, activeStep, stepInputs){
        addProductToBundle(productId, activeStep, stepInputs, this.activeStepData.productInput.maxProductsOnStep);
      },

      //Remove product from the bundle
      removeProduct(productId, activeStep, stepInputs){
        removeProductFromBundle(productId, activeStep, stepInputs);
      },

      //get product quantity in the bundle
      getProductQuantity(productId, stepInputs, activeStep){
        return getProductQuantityInBundle(productId, stepInputs, activeStep);
      },

      canAddMoreProducts() {
        return getTotalProductsInBundle(this.stepInputs) < this.activeStepData.productInput.maxProductsOnStep;
      },

      stepInputsFulfiled(){
        const productsQuantity = getTotalProductsInBundle(this.stepInputs); //Util function for getting total products in bundle
        return productsQuantity >= this.activeStepData.productInput.minProductsOnStep && productsQuantity <= this.activeStepData.productInput.maxProductsOnStep;
      },

      
      // Set active step
      setActiveStep(stepNumber){
       if (stepNumber <= this.reachedStep){
          this.activeStep = stepNumber;
          this.activeStepData = this.bundleData.steps[parseInt(stepNumber-1)]
          this.fetchProductsData();
       }
      },

      // Increment step
      incrementStep(){
        if (this.activeStep < this.reachedStep){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
          this.fetchProductsData();
        }
        else if (this.activeStep == this.reachedStep){
          if (this.reachedStep == this.bundleData.steps.length) return;
          this.reachedStep++;
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
          this.fetchProductsData();
        }
      },

      // Decrement step
      decrementStep(){
        if (this.activeStep > 1){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep - 2)];
          this.activeStep--;       
        }
      }

    }));
  });
</script>

{% comment %} Alpine.js import {% endcomment %}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>