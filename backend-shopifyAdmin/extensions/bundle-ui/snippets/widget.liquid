{% comment %} CSS code for widget {% endcomment %}
{{ 'widget.css' | asset_url | stylesheet_tag }}

{% comment %} Widget body start {% endcomment %}
{% if bundleId != blank %}
  <div id="neat-bundles-widget-container" x-data="bundle">
    {% comment %} Loading {% endcomment %}
    <template x-if="initialLoading">
      <div class="loading-container">
        <p>Loading...</p>
      </div>
    </template>

    {% comment %} Not loading {% endcomment %}
    <template x-if="!initialLoading">
      <div class="neat-bundles-inner-container">

        {% comment %} Step heading {% endcomment %}
        <div class="steps-heading-container">
          <template x-for="step in bundleData.steps">
            {% comment %} Previous steps icon {% endcomment %}
            <div>
              <template x-if="step.stepNumber < reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color passed-step">
                    <span x-text="step.stepNumber" class="icon-number passed-step"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
              {% comment %} Current step icon {% endcomment %}
              <template x-if="step.stepNumber == reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title active-step"></span>
                </div>
              </template>
              {% comment %} Inactive step icon {% endcomment %}
              <template x-if="step.stepNumber > reachedStep">
                <div class="step-heading-container inactive-step" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color ">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
            </div>
          </template>
        </div>

        {% comment %} Step description {% endcomment %}
        <div class="step-description-container">
          <p x-text="activeStepData.description"></p>
        </div>

        {% comment %} Step body {% endcomment %}
        <template x-if="stepLoading">
          <div class="loading-container">
            <p>Loading...</p>
          </div>
        </template>
        {% comment %} Products loaded {% endcomment %}
        <template x-if="!stepLoading">
          <div class="step-body">
            {% comment %} Product step {% endcomment %}
            <template x-if="activeStepData.stepType == 'PRODUCT'">
              <div class="products-container">
                {% comment %} Individualproducts {% endcomment %}
                <template x-for="product in activeStepProducts">
                  <div class="product">
                    <img x-bind:src="product.variants[product.selectedVariantIndex].featured_image?.src || product.featured_image" alt="product image">
                    <div class="product-details">
                      <p x-text="product.title" class="product-title"></p>
                      <span x-text="product.variants[product.selectedVariantIndex].price" class="product-price"></span>
                      {% comment %} Product variant selector {% endcomment %}
                      <div
                        x-data="{selectedOptions: product.variants[product.selectedVariantIndex].options.map(option => option)}"
                        x-init="$watch('selectedOptions', value => {
                        product.selectedVariantIndex = findVariantIndex(value, product.variants)
                      })"
                        class="product-variants-container">
                        {% comment %} Option values {% endcomment %}
                        <template x-for="option in product.options">
                          <div class="product-option-picker-container">
                            <label x-text="option.name" class="option-title"></label>
                            <select class="variant-selector" x-model="selectedOptions[product.options.indexOf(option)]">
                              <template x-for="value in option.values">
                                <option x-text="value" class="option-value"></option>
                              </template>
                            </select>
                          </div>
                        </template>
                        <p class="product-variant-unavailable-text" x-text="!product.variants[product.selectedVariantIndex].available ? 'This product option is currenty unavailable.' : '' "></p>

                      </div>

                      <div class="product-action-btns-container">
                        <button class="small-btn view-product-btn">View product</button>
                        <button class="small-btn add-to-bundle-btn" x-bind:disabled="!product.variants[product.selectedVariantIndex].available">Add to bundle</button>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </template>
            {% comment %} Content step {% endcomment %}
            <template x-if="activeStepData.stepType == 'CONTENT'">
              <div>
                <p>Content step</p>
              </div>
            </template>
          </div>
        </template>

        {% comment %} Step navigation {% endcomment %}
        <div class="nav-buttons">
          <button @click="decrementStep">Previous step</button>
          <button @click="incrementStep">Next step</button>
        </div>


      </div>
    </template>
  </div>
{% endif %}
{% comment %} Widget body end {% endcomment %}


{% comment %} JS code for widget {% endcomment %}
<script>
  const APP_URL = "https://keeping-tm-bodies-illinois.trycloudflare.com";

  //Money format from shopify used to format prices
  Shopify.money_format = "{{ shop.money_format }}";

  document.addEventListener("alpine:init", () => {
    Alpine.data("bundle", () => ({
      // Fetch bundle settings data
      init(){
        fetch(`${APP_URL}/api/bundleData?bundleId={{bundleId}}&storeUrl={{shop.permanent_domain}}`, {mode: 'cors'})
            .then(response => response.json())
            .then(data => {
              if (data.ok) {
                this.bundleData = data.data;
                this.activeStepData = data.data.steps[0];
              }
              else {
                console.log(data.message);
              }
            }).then(() => {
              //Finished loading of the step icons and titles
              this.initialLoading = false;
            }).then(() => {
              //Fetching products for the first step
              this.fetchProductsData();
            }).catch(error => {
              console.log('error', error);
              alert("There was an error with fetching your bundle. Please try again. If the problem persists, contact support.");
            })
      },

      shopDomain: "{{ shop.permanent_domain }}", // Shopify store domain
      bundleId: "{{ bundleId }}", // Bundle ID

      initialLoading: true, // Loading state
      stepLoading: true, // Step loading state
      bundleData: {}, // Bundle settings data

      //Current bundle selects and inputs
      bundleInputs: [{stepId: 1, productsSelected: [], contentInputs: []}],
      reachedStep: 1, // Farthes step reached by the user
      activeStep: 1, // Current active step
      activeStepData: {}, // Current active step data
      activeStepProducts: [], // Products data

      // Fetch products data
      async fetchProductsData(){
        if (this.activeStepData.stepType == "PRODUCT") {
          this.stepLoading = true;
          //Getting product handles for all products
          const productHandlesToFetch = this.activeStepData.productInput.products.map(product => product.shopifyProductHandle);
          //Fetching products data
          await Promise.all(productHandlesToFetch.map(async productHandle => {
            const products = await fetch(window.Shopify.routes.root + `products/${productHandle}.js`)
              .then(response => response.json())
              .then(product => {
                if (product.id) {
                  //Formating prices of products
                  product = {...product, price: Shopify.formatMoney(product.price), variants: product.variants.map((variant) => {
                    return {...variant, price: Shopify.formatMoney(variant.price)}
                  })};  

                  product.selectedVariantIndex = 0; //By default first variant is selected
                  product.outOfStock = product.variants.every(variant => !variant.available);

                  product.options = product.options.filter(option => (option.name !== "Title" && option.values.length !== 1))

                  this.activeStepProducts.push(product);
                  
                  // //leaving only available variants
                  // product.variants = product.variants.filter((variant) => variant.available);

                  // if (product.variants.length > 0) {
                  //   // Removing options values that don't have any available variants
                  //   filterAvailableOptionsAndValues(product.options, product.variants);
                  //   product.selectedVariantIndex = 0; //By default first variant is selected
                  //   product.outOfStock = false

                  //   this.activeStepProducts.push(product);
                  // }
                }
                else {
                  console.log(data.message);
                }
              }).catch(error => {
                console.log('error', error);
              })
          })).then(() => {
            this.stepLoading = false;
            //Finished with fetching products data for active step
          });
        }
      },
      
      // Set active step
      setActiveStep(stepNumber){
       if (stepNumber <= this.reachedStep){
          this.activeStep = stepNumber;
          this.activeStepData = this.bundleData.steps[parseInt(stepNumber-1)]
          this.fetchProductsData();
       }
      },

      // Increment step
      incrementStep(){
        if (this.activeStep < this.reachedStep){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
          this.fetchProductsData();

        }
        else if (this.activeStep == this.reachedStep){
          if (this.reachedStep == this.bundleData.steps.length) return;
          this.reachedStep++;
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
          this.fetchProductsData();

        }
      },

      // Decrement step
      decrementStep(){
        if (this.activeStep > 1){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep - 2)];
          this.activeStep--;       
        }
      }

    }));
  });
</script>

{% comment %} widget.js import {% endcomment %}
<script src="{{ 'widget.js' | asset_url }}"></script>

{% comment %} Alpine.js import {% endcomment %}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>