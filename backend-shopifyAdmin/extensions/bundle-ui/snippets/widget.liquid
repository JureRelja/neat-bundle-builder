{% comment %} CSS code for widget {% endcomment %}
{{ 'widget.css' | asset_url | stylesheet_tag }}

{% comment %} Widget body start {% endcomment %}
{% if bundleId != blank %}
  <div id="neat-bundles-widget-container" x-data="bundle">
    {% comment %} Loading {% endcomment %}
    <template x-if="initialLoading">
      <div class="loading-container">
        <p>Loading...</p>
      </div>
    </template>
    {% comment %} Not loading {% endcomment %}
    <template x-if="!initialLoading">
      <div class="neat-bundles-inner-container">
        {% comment %} Step heading {% endcomment %}
        <div class="steps-heading-container">
          <template x-for="step in bundleData.steps">
            {% comment %} Previous steps icon {% endcomment %}
            <div>
              <template x-if="step.stepNumber < reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color passed-step">
                    <span x-text="step.stepNumber" class="icon-number passed-step"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
              {% comment %} Current step icon {% endcomment %}
              <template x-if="step.stepNumber == reachedStep">
                <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title active-step"></span>
                </div>
              </template>
              {% comment %} Inactive step icon {% endcomment %}
              <template x-if="step.stepNumber > reachedStep">
                <div class="step-heading-container inactive-step" @click="setActiveStep(step.stepNumber)">
                  <div class="step-icon-container icon-color ">
                    <span x-text="step.stepNumber" class="icon-number"></span>
                  </div>
                  <span x-text="step.title" class="step-title"></span>
                </div>
              </template>
            </div>
          </template>
        </div>

        {% comment %} Step description {% endcomment %}
        <div class="step-description-container">
          <p x-text="activeStepData.description"></p>
        </div>

        {% comment %} Step body {% endcomment %}
        {% comment %} Step loading {% endcomment %}
        <template x-if="stepLoading">
          <div class="loading-container">
            <p>Loading...</p>
          </div>
        </template>
        {% comment %} Step loaded {% endcomment %}
        <template x-if="!stepLoading">
          <div class="step-body">
            <template x-if="activeStepData.stepType == 'PRODUCT'">
              <div class="products-container">
                <template x-for="product in productsData."></template>
              </div>
            </template>
            <template x-if="activeStepData.stepType == 'CONTENT'">
              <div>
                <p>Content step</p>
              </div>
            </template>
          </div>
        </template>

        {% comment %} Step navigation {% endcomment %}
        <div class="nav-buttons">
          <button @click="decrementStep">Previous step</button>
          <button @click="incrementStep">Next step</button>
        </div>


      </div>
    </template>
  </div>
{% endif %}
{% comment %} Widget body end {% endcomment %}


{% comment %} JS code for widget {% endcomment %}
<script>
  const APP_URL = "https://sister-christine-shoe-attitude.trycloudflare.com";

  document.addEventListener("alpine:init", () => {
    Alpine.data("bundle", () => ({
      // Fetch bundle settings data
      init(){
        fetch(`${APP_URL}/api/bundleData?bundleId={{bundleId}}&storeUrl={{shop.permanent_domain}}`)
            .then(response => response.json())
            .then(data => {
              if (data.ok) {
                this.bundleData = data.data;
                this.activeStepData = data.data.steps[0];
              }
              else {
                console.log(data.message);
              }
            }).then(() => {
              this.initialLoading = false;
            }).catch(error => console.log('error', error))
      },
      shopDomain: "{{ shop.permanent_domain }}", // Shopify store domain
      bundleId: "{{ bundleId }}", // Bundle ID

      initialLoading: true, // Loading state
      stepLoading: true, // Step loading state
      bundleData: {}, // Bundle settings data

      //Current bundle selects and inputs
      bundleInputs: [{stepId: 1, productsSelected: [], contentInputs: []}],
      reachedStep: 1, // Farthes step reached by the user
      activeStep: 1, // Current active step
      activeStepData: {}, // Current active step data
      productsData: [], // Products data

      // Fetch products data
      async fetchProductsData(){
        
        this.stepLoading = true;
        fetch(window.Shopify.routes.root + 'products/the-3p-fulfilled-snowboard.js')
        .then(response => response.json())
        .then(product => console.log(product));

      },

      
      // Set active step
      setActiveStep(stepNumber){
       if (stepNumber <= this.reachedStep){
          this.activeStep = stepNumber;
          this.activeStepData = this.bundleData.steps[parseInt(stepNumber-1)];
       }
      },

      // Increment step
      incrementStep(){
        if (this.activeStep < this.reachedStep){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
        }
        else if (this.activeStep == this.reachedStep){
          if (this.reachedStep == this.bundleData.steps.length) return;
          this.reachedStep++;
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep)];
          this.activeStep++;
        }
      },

      // Decrement step
      decrementStep(){
        if (this.activeStep > 1){
          this.activeStepData = this.bundleData.steps[parseInt(this.activeStep - 2)];
          this.activeStep--;       
        }
      }
      

    }));
  });
</script>


{% comment %} Alpine.js import {% endcomment %}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>