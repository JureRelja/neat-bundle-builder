{% comment %} CSS code for widget {% endcomment %}
{{ 'widget.css' | asset_url | stylesheet_tag }}

{% comment %} Widget body start {% endcomment %}
{% if bundleId != blank %}
  <div id="neat-bundles-widget-container" x-data="bundle">
    <div class="neat-bundles-inner-container">
      {% comment %} Step heading {% endcomment %}
      <div class="steps-heading-container">
        <template x-for="step in bundleData.steps">
          {% comment %} Previous steps icon {% endcomment %}
          <div>
            <template x-if="step.stepNumber < reachedStep" x-transition>
              <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                <div class="step-icon-container icon-color passed-step">
                  <span x-text="step.stepNumber" class="icon-number passed-step"></span>
                </div>
                <span x-text="step.title" class="step-title"></span>
              </div>
            </template>
            {% comment %} Current step icon {% endcomment %}
            <template x-if="step.stepNumber == reachedStep" x-transition>
              <div class="step-heading-container" @click="setActiveStep(step.stepNumber)">
                <div class="step-icon-container icon-color">
                  <span x-text="step.stepNumber" class="icon-number"></span>
                </div>
                <span x-text="step.title" class="step-title active-step"></span>
              </div>
            </template>
            {% comment %} Inactive step icon {% endcomment %}
            <template x-if="step.stepNumber > reachedStep" x-transition>
              <div class="step-heading-container inactive-step" @click="setActiveStep(step.stepNumber)">
                <div class="step-icon-container icon-color ">
                  <span x-text="step.stepNumber" class="icon-number"></span>
                </div>
                <span x-text="step.title" class="step-title"></span>
              </div>
            </template>
          </div>
        </template>
      </div>
      {% comment %} Step description {% endcomment %}
      <div class="step-description-container">
        <p x-text="activeStepData.description"></p>
      </div>
      {% comment %} Step body {% endcomment %}
      <div class="step-body">
        <span>asdf</span>
      </div>
      {% comment %} Step navigation {% endcomment %}
      <div class="nav-buttons">
        <button @click="decrementStep">Previous step</button>
        <button @click="incrementStep">Next step</button>
      </div>


    </div>
  </div>
{% endif %}
{% comment %} Widget body end {% endcomment %}


{% comment %} Alpine.js import {% endcomment %}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

{% comment %} JS code for widget {% endcomment %}
<script>
  const APP_URL = "https://replied-delight-cutting-serving.trycloudflare.com";

  document.addEventListener("alpine:init", () => {
    Alpine.data("bundle", () => ({
      // Fetch bundle settings data
      init(){
        fetch(`${APP_URL}/api/bundleData?bundleId={{bundleId}}&storeUrl={{shop.permanent_domain}}`)
            .then(response => response.json())
            .then(data => {
              this.bundleData = data;
              this.activeStepData = data.steps[0];
              this.loading = false;
            })
            .catch(error => console.log('error', error));
      },
    
      shopDomain: "{{ shop.permanent_domain }}", // Shopify store domain
      bundleId: "{{ bundleId }}", // Bundle ID
      loading: true, // Loading state
      bundleData: {}, // Bundle settings data

      //Current bundle selects and inputs
      bundleInputs: [{stepId: 1, productsSelected: [], contentInputs: []}],
      reachedStep: 2, // Farthes step reached by the user
      activeStep: 1, // Current active step
      activeStepData: {}, // Current active step data

      // Set active step
      setActiveStep(stepNumber){
       if (stepNumber <= this.reachedStep){
          this.activeStep = stepNumber;
          this.activeStepData = this.bundleData.steps[parseInt(stepNumber-1)];
       }
      },

      // Increment step
      incrementStep(){
        if (this.reachedStep == this.bundleData.steps.length) return;

        if (this.activeStep < this.reachedStep){
          setActiveStep(this.activeStep + 1);
        }
        else if (this.activeStep == this.reachedStep){
          this.reachedStep++;
          setActiveStep(this.activeStep + 1);
        }
      },

      // Decrement step
      decrementStep(){
        if (this.activeStep > 1){
          setActiveStep(this.activeStep - 1);
        }
      }
      

    }));
  });
</script>