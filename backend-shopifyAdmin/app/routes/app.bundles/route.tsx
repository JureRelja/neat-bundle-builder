import { redirect, json, Outlet } from '@remix-run/react';
import type { ActionFunctionArgs } from '@remix-run/node';
import { authenticate } from '../../shopify.server';
import db from '../../db.server';
import { JsonData } from '../../types/jsonData';
import { BundlePageService } from '~/adminBackend/service/BundlePageService';
import { bundleTagIndentifier } from '~/constants';
import { Page } from 'node_modules/@shopify/shopify-api/dist/ts/rest/admin/2024-04/page';
import { BundleRepository } from '~/adminBackend/repository/BundleRepository';

export const loader = async ({ request }: ActionFunctionArgs) => {
    await authenticate.admin(request);

    // const formData = await request.formData();
    // if (!formData) {
    //   return redirect("/app");
    // }

    return null;
};

export const action = async ({ request }: ActionFunctionArgs) => {
    const { session, admin } = await authenticate.admin(request);

    const formData = await request.formData();
    const action = formData.get('action');

    switch (action) {
        case 'createBundle': {
            const { _max }: { _max: { id: number | null } } = await db.bundle.aggregate({
                _max: {
                    id: true,
                },
                where: {
                    storeUrl: session.shop,
                },
            });

            const defaultBundleTitle = `New bundle ${_max.id ? _max.id : ''}`;

            //Create product
            //Save a bundle page and connect a template to it
            const [productCreateResponse, allStoreThemes] = await Promise.all([
                //Create a new product that will be used as a bundle wrapper
                admin.graphql(
                    `#graphql
                mutation productCreate($productInput: ProductInput!) {
                  productCreate(input: $productInput) {
                    product {
                      id
                      handle
                    }
                  }
                }`,
                    {
                        variables: {
                            productInput: {
                                title: defaultBundleTitle,
                                productType: 'Neat Bundle',
                                vendor: 'Neat Bundles',
                                published: true,
                                tags: [bundleTagIndentifier],
                                descriptionHtml: `<p>This is a dummy product generated by <b>Neat bundles</b> app and must not be deleted or altered.</p>
<p>Neat bundles creates a dummy product for every bundle you configure in the app. These dummy products are used to make selling bundles easier for you and your customers.</p>`,
                            },
                        },
                    },
                ),

                await admin.rest.resources.Theme.all({
                    session,
                    fields: 'id, role',
                }),
            ]);

            //Find active theme
            const activeTheme = allStoreThemes.data.find((theme) => {
                theme.role === 'main';
            });

            //Service for creating and managing new page
            const bundlePageService = new BundlePageService(session, admin, defaultBundleTitle);

            await bundlePageService.asignTemplateToPage(activeTheme?.id as number);

            //Newly create bundle product
            const productData = await productCreateResponse.json();

            const [urlRedirectRes, bundleId] = await Promise.all([
                admin.graphql(
                    `#graphql
                    mutation createProductToBundleRedirect($input: UrlRedirectInput!) {
                      urlRedirectCreate(urlRedirect: $input) {
                        urlRedirect {
                          id
                        }
                      }
                    }`,
                    {
                        variables: {
                            input: {
                                path: `/pages/${bundlePageService.getPage().handle}`,
                                target: `/products/${productData.data.handle}`,
                            },
                        },
                    },
                ),
                //Create new bundle
                BundleRepository.createNewBundle(session.shop, defaultBundleTitle, productData.data.productCreate.product.id, bundlePageService.getPageId()?.toString() || ''),
            ]);

            bundlePageService.setPageMetafields(bundleId);

            return redirect(`/app/bundles/${bundleId}`);
        }

        default: {
            return json(
                {
                    ...new JsonData(true, 'success', "This is the default action that doesn't do anything."),
                },
                { status: 200 },
            );
        }
    }
};

export default function Index() {
    return <Outlet />;
}
